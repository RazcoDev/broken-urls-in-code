package permit.utils.abac

import data.permit.utils
import data.permit.utils.rbac

__generated_user_attributes = {
	"roles": rbac.user_roles,
	"tenants": rbac.user_tenants,
}

__generated_resource_attributes = {"type": input.resource.type}

default __stored_user_attributes = {}

__stored_user_attributes = data.users[input.user.key].attributes

# Stored tenant attributes only work if the input user is a member
default __stored_tenant_attributes = {}

__stored_tenant_attributes = result {
	rbac.__user_in_tenant
	result := data.tenants[input.resource.tenant].attributes
}

default __stored_resource_attributes = {}

__stored_resource_attributes = data.resource_instances[sprintf("%s:%s", [input.resource.type, input.resource.key])].attributes

default __input_user_attributes = {}

default __input_resource_attributes = {}

default __input_tenant_attributes = {}

default __input_context_attributes = {}

default __custom_user_attributes = {}

default __custom_resource_attributes = {}

default __custom_tenant_attributes = {}

default __custom_context_attributes = {}

__input_user_attributes = input.user.attributes

__input_resource_attributes = input.resource.attributes

__input_tenant_attributes = input.tenant.attributes

__input_context_attributes = input.context

__custom_user_attributes = data.permit.custom.custom_user_attributes

__custom_tenant_attributes = data.permit.custom.custom_tenant_attributes

__custom_resource_attributes = data.permit.custom.custom_resource_attributes

__custom_context_attributes = data.permit.custom.custom_context_attributes

# For each attribute, the order of preference is:
#   input - What was given in the request, if any
#   custom - Attributes generated by custom Rego code
#   stored - Attributes from Permit's database and backend
#   generated - Atrributes generated in this file

__user_attributes = object.union_n([
	__generated_user_attributes, __stored_user_attributes,
	__custom_user_attributes, __input_user_attributes,
])

__resource_attributes = object.union_n([
	__generated_resource_attributes, __stored_resource_attributes,
	__custom_resource_attributes, __input_resource_attributes,
])

__tenant_attributes = object.union_n([__stored_tenant_attributes, __custom_tenant_attributes, __input_tenant_attributes])

__context_attributes = object.union(
	__custom_context_attributes,
	__input_context_attributes,
)

attributes = {
	"user": __user_attributes,
	"resource": __resource_attributes,
	"tenant": __tenant_attributes,
	"context": __context_attributes,
	# TODO: When we want to add data from system, use these
	#	"resource": object.union(__input_resource_attributes, data.resource[input.resource.id].attributes),
	#	"environment": object.union(__input_context_environment, data.environment.attributes),

}

condition_set_permissions := data.condition_set_rules
